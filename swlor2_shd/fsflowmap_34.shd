//=============================================================================
//
// fsFlowmap.shd
// 
// Takes the RG channels of a normal map or custom flow map and uses them
// as xy flow offsets to a base flow vector. R > 0.5 is right. G > 0.5 is up.
//
// Supply your RG flow map in texture6 of the associated mtr file.
// Use customshadervs vslitc_sm_nm
// And customshaderfs fsFlowmap
// on top of your material file
//
//=============================================================================

#define SHADER_TYPE 2

#define FOG 1
#define KEYHOLING 0
#define LIGHTING 1

#define NORMAL_MAP 1
#define SPECULAR_MAP 0
#define ROUGHNESS_MAP 0
#define HEIGHT_MAP 1
#define SELF_ILLUMINATION_MAP 0
#define ENVIRONMENT_MAP 0

#include "inc_standard"

#if BUILD_REVISION < 35
   uniform int worldtimerTimeOfDay;
#endif   

uniform sampler2D texUnit6;
uniform float fSlideSpeed;

//----------------------------------------------
//            BEGIN CUSTOM VARIABLES
//----------------------------------------------

//Use this to mix in your flow map with the base slide speed
//Most flow maps are very high saturation which can cause a problem with this mixing method
//Suggested values in the thousandths when used with a base speed above
float fFlowMapMod = 1.0;

//Use this to change the mixing time between the two sliding phases
//Short times will appear to flash. Long times may appear to blur.
float fMixingTime = 5.0;

//----------------------------------------------
//              END CUSTOM VARIABLES
//----------------------------------------------


// ref: https://discord.com/channels/255017439371329537/467392390429278211/1001527412485537883
//
// flowmap and slide should be able to get good transparency now if you add these this line to the associated shader file
//
#ifndef FORCE_ALLOW_DISCARD
#define FORCE_ALLOW_DISCARD 1
#endif
//
// and these to the material file
//
// transparency 1
// sample_framebuffer 2
//
// TODO - try this on the gelatinous cube again!


int TotalTimer()
{
	return worldtimerTimeOfDay;
}

void SetupSlidingShaderInputs()
{
	#if LIGHTING == 1
		FragmentColor.a *= materialFrontDiffuse.a;
	#endif

	#if NO_TEXTURE == 1 || ENVIRONMENT_MAP == 1
		AlphaDiscard(FragmentColor.a);
	#endif

	#if POSITION_VIEW == 1
		#if VERTEX_NORMAL == 1
			// We need to normalize due to interpolation etc.
			vSurfaceNormal = normalize(vVertexNormal);
			vFragmentNormal = vSurfaceNormal;
		#endif
		
		// Used for both specular light, height and environment map.
		#if HEIGHT_MAP == 1 || (ENVIRONMENT_MAP == 1 && FRAGMENT_NORMAL == 1) || LIGHTING == 1 || SPECULAR_LIGHT == 1
			SetupViewToSurfaceNormal();
		#endif
		
	#endif

	#if NO_TEXTURE != 1

		vec4 MainTextureColor;
			
		vTexCoords = vVertexTexCoords.xy;
		
		//get just the decimal portion of the tick
		float fTick = worldtimerTimeOfDay/1000.0;
		
		vec2 vFlowMap = fFlowMapMod * texture2D(texUnit6, vTexCoords).rg * 2.0 - 1.0;

        // Use two cycles, offset by a half so we can blend between them
        float t1 = fTick / fMixingTime;
        float t2 = t1 + 0.5*fMixingTime;
        float cycleTime1 = t1 - floor(t1);
        float cycleTime2 = t2 - floor(t2);
        vec2 flowDirection1 = vFlowMap * cycleTime1;
        vec2 flowDirection2 = vFlowMap * cycleTime2;
				
        vec2 uv1 = vTexCoords - fSlideSpeed*flowDirection1;
        vec2 uv2 = vTexCoords - fSlideSpeed*flowDirection2;
		
		float fMixFactor = abs(cycleTime1 - 0.5) * 2.0;
        
		
		
		// Setup tangent space basis.
		#if NORMAL_MAP == 1 || HEIGHT_MAP == 1

			if(
			#if HEIGHT_MAP == 1
				texture4Bound != 0 || 
			#endif
			#if NORMAL_MAP == 1
				texture1Bound != 0 ||
			#endif
				false // allows adding the || operator in the above checks.
				)
			{
				mat3 mTSB = SetupTSB();
				
				#if HEIGHT_MAP == 1
					if(texture4Bound != 0)
					{
						DisplaceTextureCoords(uv1, mTSB);
						DisplaceTextureCoords(uv2, mTSB);
					}
				#endif

				#if NORMAL_MAP == 1 && LIGHTING == 1
					if(texture1Bound != 0)
					{
						vec3 n1 = vec3(0.0);
						vec3 n2 = vec3(0.0);
						
						n1.xy = texture2D(texUnit1, uv1).rg * 2.0 - 1.0;
						n1.z = sqrt(max(1.0 - dot(n1.xy, n1.xy),0.0));
						n1.xy = transpose(mat2(m_texture)) * n1.xy;
						n1 = mTSB * n1;

						n2.xy = texture2D(texUnit1, uv2).rg * 2.0 - 1.0;
						n2.z = sqrt(max(1.0 - dot(n2.xy, n2.xy),0.0));
						n2.xy = transpose(mat2(m_texture)) * n2.xy;
						n2 = mTSB * n2;
						
						vFragmentNormal = mix(n1, n2, fMixFactor);

					}
				#endif
			}
		#endif
		
		// Check for compatibility alone as texture0Bound is not set for certain elements.
		if(texture0Bound == 0)
		{ 
			#if ENVIRONMENT_MAP == 1
				MainTextureColor.rgb = vec3(0.666667, 0.666667, 0.666667);
				fEnvMapLevel = 1.0;	
			#else
				MainTextureColor = COLOR_WHITE;
			#endif
		}
		else
		{
			vec4 color1 = texture2D(texUnit0, uv1);
			vec4 color2 = texture2D(texUnit0, uv2);
			
			MainTextureColor = mix( color1, color2, fMixFactor);

		
			#if ENVIRONMENT_MAP == 1

				fEnvMapLevel = 1.0-MainTextureColor.a;

				#if FRAGMENT_LIGHTING == 1 && LIGHTING == 1
					MainTextureColor.rgb = mix(MainTextureColor.rgb, vec3(0.666667, 0.666667, 0.666667), fEnvMapLevel);									
				#endif

			#endif
			
			MainTextureColor.rgb = ApplyColorSpace(MainTextureColor.rgb);
		}
				
		// Only do this for vertex lighting - otherwise we apply environment maps as specular light instead.
		#if ENVIRONMENT_MAP == 1
				
			#if SPECULAR_LIGHT != 1
			
				vec3 vTexEnvironment;
				// If not normal mapped, we can use the coordinates from the vertex shader instead.
				#if FRAGMENT_NORMAL != 1
					if(envMapCube == 1)
					{
						vTexEnvironment = SampleEnvironmentMapCube(vVertexTexCoordsEnvironmentCube, 0.0);
					}
					else
					{
						vTexEnvironment = SampleEnvironmentMap(vVertexTexCoordsEnvironment, 0.0);
					}
				#else
					if(envMapCube == 1)
					{
						vTexEnvironment = SampleEnvironmentMapCube(CalculateEnvironmentTexCoordsCube(vFragmentNormal), 0.0);
					}
					else
					{
						vTexEnvironment = SampleEnvironmentMap(CalculateEnvironmentTexCoords(vFragmentNormal), 0.0);
					}
				#endif 
			
				MainTextureColor.rgb = mix(MainTextureColor.rgb, vTexEnvironment.rgb, fEnvMapLevel);

			#endif

			FragmentColor.rgb *= MainTextureColor.rgb;
		
		#else

			FragmentColor *= MainTextureColor;

			AlphaDiscard(FragmentColor.a);

		#endif

	#endif

	#if LIGHTING == 1

		#if HEIGHT_MAP == 1 || NORMAL_MAP == 1
			SetupOcclusion();
		#endif

		#if (FRAGMENT_LIGHTING == 1 || NORMAL_MAP == 1) && SPECULAR_LIGHT == 1
		
			SetupSpecularity(FragmentColor.rgb * materialFrontDiffuse.rgb);
				
		#endif

	#endif
}

void main ()
{
    FragmentColor = vec4(1.0);	
 	SetupSlidingShaderInputs();
    ApplyStandardShader();
    gl_FragColor = FragmentColor;
}
