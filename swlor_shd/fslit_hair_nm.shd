//=============================================================================
//
// fslit_hair_nm.shd
//
// Fragment shader for Dafena's hair mdls to support normal/specm/alpha maps.
//
// Diffuse in texture 0
// Normal in texture 1
// Specular in texture 2
// Alpha in texture 3
//
// Not compatible with standard shader's roughness map.
//
// Version 0.2.5
// Modified from .15 base shaders by summonFox for Cormyr and the Dalelands.
// Last modified: September 16, 2020.
//
//=============================================================================

#define SHADER_TYPE 2

#define LIGHTING 1
#define FOG 1
#define KEYHOLING 1

#define NORMAL_MAP 1
#define SPECULAR_MAP 1
#define ROUGHNESS_MAP 0 // Not compatible with this shader without changing texture slot roughness uses.
#define HEIGHT_MAP 0
#define SELF_ILLUMINATION_MAP 0
#define ENVIRONMENT_MAP 1

// These parameters must be defined in the .mtr!
uniform float fAlphaThreshold;
uniform float fAlphaNearBias;
uniform float fAlphaFarBias;

#include "inc_standard"

uniform sampler2D texUnit3; // MULTI_MAP for Dafena's head pack .mdl/.mtrs. Red channel = hair alpha map.

void main ()
{
    // Standard shader stuff.
	FragmentColor = COLOR_WHITE;
	
	SetupStandardShaderInputs();
    ApplyStandardShader();
	
	// Pull alpha map from texture 3's red channel.
	gl_FragColor = vec4(FragmentColor.rgb, materialFrontDiffuse.a * texture2D(texUnit3, vTexCoords.xy).r);
	
	// Alpha testing/cutoff with distance bias.
	if (fAlphaThreshold >= 0.0 && texture2D(texUnit3, vTexCoords.xy).r < fAlphaThreshold - 0.2) // Test pixel's alpha in the texture to fix VFX applied transparency discarding the pixel erroneously (aka, invisible heads).
	{
		float fViewDistance = dot(cameraPosition, (m_view_inv * vec4(vPosView, 1.0)).xyz);
		float fAlphaDiscard = clamp(fAlphaThreshold - (min(fViewDistance, fAlphaNearBias)/fAlphaFarBias), 0, fAlphaThreshold);
		
		if (gl_FragColor.a < fAlphaDiscard)
		{
			discard;
		}
	}
}